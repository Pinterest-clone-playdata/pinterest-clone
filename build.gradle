buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}

plugins {
	id 'org.springframework.boot' version '2.5.10'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10" // (1)
	id 'java'
}

group = 'com.team1'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'junit:junit:4.13.1'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
	implementation "com.querydsl:querydsl-apt:${queryDslVersion}"
	implementation "com.querydsl:querydsl-core:${queryDslVersion}"

	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

	testImplementation 'io.findify:s3mock_2.12:0.2.6'

	implementation("com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.5.6")

	//Swagger
	//implementation("io.springfox:springfox-boot-starter:3.0.0")
	//implementation("io.springfox:springfox-swagger-ui:3.0.0")
	implementation 'io.springfox:springfox-boot-starter:3.0.0'

	//Spring Security // JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2', 'io.jsonwebtoken:jjwt-jackson:0.11.2'
	implementation 'org.springframework.boot:spring-boot-starter-security'
}

tasks.named('test') {
	useJUnitPlatform()
}


def querydslDir = "$buildDir/generated/querydsl" // (3)

querydsl { // (4)
	jpa = true
	querydslSourcesDir = querydslDir
}

sourceSets { // (5)
	main.java.srcDir querydslDir
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	querydsl.extendsFrom compileClasspath
}

compileQuerydsl { // (7)
	options.annotationProcessorPath = configurations.querydsl
}